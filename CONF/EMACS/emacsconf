;;; Config file --- setup

;;; Code:
(setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backups")))
(setq auto-save-default nil)
(setq scroll-error-top-bottom t)
(setq inhibit-startup-screen 1)
(setq create-lockfiles nil)
(setq compilation-scroll-output 'first-error)

(tool-bar-mode -1)
(scroll-bar-mode 0)
(ido-mode t)
(blink-cursor-mode 0)

;; Very global configs defaults
(setq-default
 indent-tabs-mode nil
 tab-width 4
 c-basic-offset 4
 c-default-style "stroustrup"
 ;;c-toggle-auto-newline 1
 c-toggle-hungry-state 1
 )

(set-frame-font "Inconsolata 16")
(add-hook 'after-make-frame-functions (lambda () (set-frame-font "Inconsolata 16")))

;; Very global hooks
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; the package manager
(require 'package)
(setq
 package-archives '(
                    ("melpa" . "https://melpa.org/packages/")
                    ("melpa-stable" . "https://stable.melpa.org/packages/")
                    ("gnu" . "https://elpa.gnu.org/packages/")
		    )
 )
(package-initialize)

;; Setup of use-package. We use use-package. And, if this fails, we have
;; to install use-package ourselves, and then the rest of this config
;; will run through. :)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; A bit more interactive stuff.
;; All the useability. Without it, were screwed...
(use-package evil
  :ensure t)
(evil-mode 1)

;(use-package linum-relative
;  :ensure t)
;;(linum-relative-global-mode)
;(setq linum-relative-current-symbol "")

;; Gief a user line that dont look like crap.
(use-package powerline
  :ensure t)
(powerline-center-evil-theme)

;; Choose between triangle, arrow, wave, or what ever specified in the config..
;; Me no remember really... :)
(setq powerline-default-separator 'wave)

(use-package evil-surround
  :ensure t)
(global-evil-surround-mode t)

(use-package yasnippet
  :ensure t)

(use-package evil-visual-mark-mode
  :ensure t)
;; Not used as a standard... buggy?
(advice-add 'evil-delete-marks :after
            (lambda (&rest args)
              (evil-visual-mark-render)))
(evil-visual-mark-mode t)


;;;;;;;;; ORG_STUFF ;;;;;;;;;;;

; Some nice additions to org for us evil people.
(use-package org-evil
  :ensure t)

;; Make org look splendid. Bullets eye... and so on.
(use-package org-bullets
  :ensure t)

;; Make bibtex work a treat with stuff.
;; This is actually useful, but only for latex-exports.
(use-package org-ref
 :ensure t)
(require 'org-ref)
(setq org-ref-show-broken-links nil)
;;Export stuff with bibtex and headers up to date.
(setq org-latex-pdf-process
     '("pdflatex -interaction nonstopmode -output-directory %o %f"
	"bibtex %b"
	"pdflatex -interaction nonstopmode -output-directory %o %f"
	"pdflatex -interaction nonstopmode -output-directory %o %f"))

;; Allow org to set variables inside of document. Mostly used for
;; org-ref to point out the bibtex file per project
(setq org-export-allow-bind-keywords t)

(use-package ispell
  :ensure t)

;; find aspell and hunspell automatically
(cond
 ;; try hunspell at first
  ;; if hunspell does NOT exist, use aspell
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
        ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
          )))

 ((executable-find "aspell")
  (setq ispell-program-name "aspell")
  ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
;; To keep org not disable row splitting and some org-hooks...


(use-package langtool
  :ensure t)
(require 'langtool)
(setq langtool-language-tool-jar "/usr/local/opt/languagetool/libexec/languagetool-commandline.jar")




;; (use-package poet-theme
;;   :ensure t)
(use-package olivetti
  :ensure t)

(defun my-org-mode-hook ()
  "Stuff for org mode setup."
  (ispell-minor-mode)
  (toggle-truncate-lines nil)
  (org-bullets-mode t)
  (toggle-word-wrap t)
  (flyspell-mode)
  (olivetti-mode 1)
  (olivetti-set-width 120)
  (blink-cursor-mode 0)
  (variable-pitch-mode 0)
 ; (load-theme 'poet)
  )

(add-hook 'org-mode-hook 'my-org-mode-hook)

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("kththesis"
                 "\\documentclass{kththesis}"
                 ("\\chapter{%s}" . "\\chapter{%s}")
                 ("\\section{%s}" . "\\section{%s}")
                 ("\\subsection{%s}" . "\\subsection{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                 ("\\paragraph{%s}" . "\\paragraph{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph{%s}")
                 )))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;GIT;;;;;;;;;;;;;;;

;; The best git. Period.
(use-package magit
  :ensure t)
;;Custom for opening magit in selected buffer, most often.
(setq magit-display-buffer-function
      (lambda (buffer)
        (display-buffer
         buffer
         (cond ((and (derived-mode-p 'magit-mode)
                     (eq (with-current-buffer buffer major-mode)
                         'magit-status-mode))
                nil)
               ((memq (with-current-buffer buffer major-mode)
                      '(magit-process-mode
                        magit-revision-mode
                        magit-diff-mode
                        magit-stash-mode))
                nil)
               (t
                '(display-buffer-same-window))))))

(use-package paredit
  :ensure t)

;;(setenv "PKG_CONFIG_PATH" (concat "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig" (getenv "PKG_CONFIG_PATH")))
;; (use-package pdf-tools
;;   :ensure t)
;; (pdf-tools-install)

;; CMAKE STHUFF
(use-package cmake-ide
  :ensure t)

;; Initialize syntax checking.
(use-package flycheck
  :ensure t)

;;Company initialization stuff
(use-package company
  :ensure t)
(global-company-mode)

;; Make symbol lookups work nice. Part 2.
(use-package rtags
  :ensure t)

(use-package company-rtags
  :ensure t)

(use-package flycheck-rtags
  :ensure t)


(defun my-select-checker()
  "Select checker for flychecks checker."
  (require 'flycheck)
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil)
  (setq-local flycheck-check-syntax-automatically nil)
  (global-flycheck-mode)
  )


(defun cmake-keybindings-hook ()
  (local-set-key (kbd "C-\, C-b m") 'cmake-ide-compile)
  (local-set-key (kbd "C-\, C-b c") 'compile)
  (local-set-key (kbd "C-\, C-b l") 'compile-goto-error))

(defun configure-company-vars ()
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0.3)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t))

(defun my-c++-mode-hook()
  "Setup for all rtags related stuff."
  (setq c-default-style "stroustrup")
  ;; Keys for c++ and rtags lookups
  (require 'company)
  ;(setq company-backends (delete 'company-semantic company-backends))
  ;(add-to-list 'company-backends 'company-rtags)
  (setq rtags-autostart-diagnostics t)
  (rtags-diagnostics)
  (setq rtags-completions-enabled t)
  (push 'company-rtags company-backends)
  (global-company-mode)
  (configure-company-vars)
  (cmake-keybindings-hook)

  (rtags-start-process-unless-running)
  (local-set-key (kbd "C-\, C-l") 'rtags-find-symbol-at-point)
  (local-set-key (kbd "C-\, C-r") 'rtags-find-references-at-point)
  (global-unset-key (kbd "C-<tab>"))
  (define-key c-mode-base-map (kbd "<C-tab>") (function company-complete))

  (my-select-checker))



;; C++ syntax completion!
;;(use-package company-irony
;;  :ensure t)
;;(defun my-irony-mode-hook()
;;  (company-irony-setup-begin-commands)
;;  (setq company-backends (delete 'company-semantic company-backends))
;;  (define-key irony-mode-map [remap completion-at-point]
;;    'irony-completion-at-point-async)
;;  (define-key irony-mode-map [remap complete-symbol]
;;    'irony-completion-at-point-async))
;;
;;(add-hook 'irony-mode-hook 'my-c++-mode-hook)
;;(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

(add-hook 'c++-mode-hook 'my-c++-mode-hook)
(add-hook 'c-mode-hook 'my-c++-mode-hook)

;;;;; OpenGL ;;;;;;

(add-to-list 'auto-mode-alist '("\\.glsl\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.vert\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.frag\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.geom\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.cl\\'" . c-mode))

(use-package web-mode
  :ensure t)
(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))


;; Python development!
(use-package elpy
  :ensure t)
(setq elpy-rpc-python-command "python3")
(setq elpy-syntax-check-command "~/Library/Python/3.6/bin/flake8")
(setq python-check-command "flake8")
(elpy-enable)


;;;;;;; THEMES ;;;;;;;
;; (use-package sublime-themes
;;   :ensure t)

;; A nice theme...
;; (use-package solarized-theme
;;   :ensure t)

;;;;;;;;;;;;;;;;;;;;;;


;;Saved Macros
(fset 'tab-line
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([105 tab escape 48 106] 0 "%d")) arg)))

;; Global keybindings
(global-set-key (kbd "C-\, C-c") 'comment-line)
(global-set-key (kbd "C-\, C-r") 'comment-region)
(global-set-key (kbd "C-\, C-t") 'tab-line)

(provide '.emacs)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (base16-material-darker)))
 '(custom-safe-themes
   (quote
    ("80930c775cef2a97f2305bae6737a1c736079fdcc62a6fdf7b55de669fbbcd13" "196df8815910c1a3422b5f7c1f45a72edfa851f6a1d672b7b727d9551bb7c7ba" "d9dab332207600e49400d798ed05f38372ec32132b3f7d2ba697e59088021555" "3f67aee8f8d8eedad7f547a346803be4cc47c420602e19d88bdcccc66dba033b" "ed36f8e30f02520ec09be9d74fe2a49f99ce85a3dfdb3a182ccd5f182909f3ab" "ecfd522bd04e43c16e58bd8af7991bc9583b8e56286ea0959a428b3d7991bbd8" "8543b328ed10bc7c16a8a35c523699befac0de00753824d7e90148bca583f986" "4b2679eac1095b60c2065187d713c39fbba27039d75c9c928a1f3b5d824a3b18" "50d07ab55e2b5322b2a8b13bc15ddf76d7f5985268833762c500a90e2a09e7aa" "4feee83c4fbbe8b827650d0f9af4ba7da903a5d117d849a3ccee88262805f40d" "6daa09c8c2c68de3ff1b83694115231faa7e650fdbb668bc76275f0f2ce2a437" "4a91a64af7ff1182ed04f7453bb5a4b0c3d82148d27db699df89a5f1d449e2a4" "aea30125ef2e48831f46695418677b9d676c3babf43959c8e978c0ad672a7329" "1263771faf6967879c3ab8b577c6c31020222ac6d3bac31f331a74275385a452" "9be1d34d961a40d94ef94d0d08a364c3d27201f3c98c9d38e36f10588469ea57" "dd4628d6c2d1f84ad7908c859797b24cc6239dfe7d71b3363ccdd2b88963f336" "9c4acf7b5801f25501f0db26ac3eee3dc263ed51afd01f9dcfda706a15234733" "3be1f5387122b935a26e02795196bc90860c57a62940f768f138b02383d9a257" "146061a7ceea4ccc75d975a3bb41432382f656c50b9989c7dc1a7bb6952f6eb4" "264b639ee1d01cd81f6ab49a63b6354d902c7f7ed17ecf6e8c2bd5eb6d8ca09c" "e1498b2416922aa561076edc5c9b0ad7b34d8ff849f335c13364c8f4276904f0" "808b47c5c5583b5e439d8532da736b5e6b0552f6e89f8dafaab5631aace601dd" "1025e775a6d93981454680ddef169b6c51cc14cea8cb02d1872f9d3ce7a1da66" "5a39d2a29906ab273f7900a2ae843e9aa29ed5d205873e1199af4c9ec921aaab" "e6a9337674f6c967311b939bb4f81aefb65a96908c3749f4dd8d4500f6d79242" "91375c6dc506913ac7488f655b5afe934f343a0b223021c349105d37748c6696" "1d3863142a1325c1d038905c82b9aaf83f7594bb6158b52ad32ed23d3a97490a" "31e9b1ab4e6ccb742b3b5395287760a0adbfc8a7b86c2eda4555c8080a9338d9" "46720e46428c490e7b2ddeafc2112c5a796c8cf4af71bd6b758d5c19316aff06" "8e51e44e5b079b2862335fcc5ff0f1e761dc595c7ccdb8398094fb8e088b2d50" "c2efd2e2e96b052dd91940b100d86885337a37be1245167642451cf6da5b924a" "65f35d1e0d0858947f854dc898bfd830e832189d5555e875705a939836b53054" "a62f0662e6aa7b05d0b4493a8e245ab31492765561b08192df61c9d1c7e1ddee" "04790c9929eacf32d508b84d34e80ad2ee233f13f17767190531b8b350b9ef22" "f5f3a6fb685fe5e1587bafd07db3bf25a0655f3ddc579ed9d331b6b19827ea46" "542e6fee85eea8e47243a5647358c344111aa9c04510394720a3108803c8ddd1" "ffac21ab88a0f4603969a24b96993bd73a13fe0989db7ed76d94c305891fad64" "45a8b89e995faa5c69aa79920acff5d7cb14978fbf140cdd53621b09d782edcf" "41eb3fe4c6b80c7ad156a8c52e9dd6093e8856c7bbf2b92cc3a4108ceb385087" "fc7fd2530b82a722ceb5b211f9e732d15ad41d5306c011253a0ba43aaf93dccc" "3e34e9bf818cf6301fcabae2005bba8e61b1caba97d95509c8da78cff5f2ec8e" "a61109d38200252de49997a49d84045c726fa8d0f4dd637fce0b8affaa5c8620" "c614d2423075491e6b7f38a4b7ea1c68f31764b9b815e35c9741e9490119efc0" "760ce657e710a77bcf6df51d97e51aae2ee7db1fba21bbad07aab0fa0f42f834" "34ed3e2fa4a1cb2ce7400c7f1a6c8f12931d8021435bad841fdc1192bd1cc7da" "1d079355c721b517fdc9891f0fda927fe3f87288f2e6cc3b8566655a64ca5453" "b67b2279fa90e4098aa126d8356931c7a76921001ddff0a8d4a0541080dee5f6" "cabc32838ccceea97404f6fcb7ce791c6e38491fd19baa0fcfb336dcc5f6e23c" "fb44ced1e15903449772b750c081e6b8f687732147aa43cfa2e7d9a38820744b" "f984e2f9765a69f7394527b44eaa28052ff3664a505f9ec9c60c088ca4e9fc0b" "16dd114a84d0aeccc5ad6fd64752a11ea2e841e3853234f19dc02a7b91f5d661" "73ad471d5ae9355a7fa28675014ae45a0589c14492f52c32a4e9b393fcc333fd" "93268bf5365f22c685550a3cbb8c687a1211e827edc76ce7be3c4bd764054bad" "5b8eccff13d79fc9b26c544ee20e1b0c499587d6c4bfc38cabe34beaf2c2fc77" "d96587ec2c7bf278269b8ec2b800c7d9af9e22d816827639b332b0e613314dfd" "250268d5c0b4877cc2b7c439687f8145a2c85a48981f7070a72c7f47a2d2dc13" "446cc97923e30dec43f10573ac085e384975d8a0c55159464ea6ef001f4a16ba" "85e6bb2425cbfeed2f2b367246ad11a62fb0f6d525c157038a0d0eaaabc1bfee" "527df6ab42b54d2e5f4eec8b091bd79b2fa9a1da38f5addd297d1c91aa19b616" "6145e62774a589c074a31a05dfa5efdf8789cf869104e905956f0cbd7eda9d0e" "f66abed5139c808607639e5a5a3b5b50b9db91febeae06f11484a15a92bde442" "50b64810ed1c36dfb72d74a61ae08e5869edc554102f20e078b21f84209c08d1" "bc4c89a7b91cfbd3e28b2a8e9e6750079a985237b960384f158515d32c7f0490" "3de3f36a398d2c8a4796360bfce1fa515292e9f76b655bb9a377289a6a80a132" "0f13c8aac1a3abd87fd31b142ba89f044734640f8fa91df69ebc0022c27a6900" "fede08d0f23fc0612a8354e0cf800c9ecae47ec8f32c5f29da841fe090dfc450" "87d46d0ad89557c616d04bef34afd191234992c4eb955ff3c60c6aa3afc2e5cc" "fec45178b55ad0258c5f68f61c9c8fd1a47d73b08fb7a51c15558d42c376083d" "6271fc9740379f8e2722f1510d481c1df1fcc43e48fa6641a5c19e954c21cc8f" "12670281275ea7c1b42d0a548a584e23b9c4e1d2dabb747fd5e2d692bcd0d39b" "7559ac0083d1f08a46f65920303f970898a3d80f05905d01e81d49bb4c7f9e39" "36282815a2eaab9ba67d7653cf23b1a4e230e4907c7f110eebf3cdf1445d8370" "44961a9303c92926740fc4121829c32abca38ba3a91897a4eab2aa3b7634bed4" "840db7f67ce92c39deb38f38fbc5a990b8f89b0f47b77b96d98e4bf400ee590a" "7c0495f3973b9f79251205995ccccca41262b41a86553f81efe71c0dc3a50f43" "ef403aa0588ca64e05269a7a5df03a5259a00303ef6dfbd2519a9b81e4bce95c" "819d24b9aba8fcb446aecfb59f87d1817a6d3eb07de7fdec67743ef32194438b" "b3bcf1b12ef2a7606c7697d71b934ca0bdd495d52f901e73ce008c4c9825a3aa" default)))
 '(package-selected-packages
   (quote
    (cmake-mode base16-theme elpy web-mode flycheck-rtags company-rtags rtags company flycheck cmake-ide paredit magit olivetti langtool org-ref org-bullets org-evil evil-visual-mark-mode yasnippet evil-surround powerline evil use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
